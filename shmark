#!/bin/sh
# set -xe

Help() {
    printf "%b" \
    "Usage:\n" \
    "./shmark file.md                    Prints the converted text in html inside the terminal\n" \
    "./shmark file.md > file.html        Pipes the output into the html file, so it can be seen in a browser\n"
}

TrimLeading() {
    # Remove all leading white-space.
    # '${1%%[![:space:]]*}': Strip everything but leading white-space.
    # '${1#${XXX}}': Remove the white-space from the start of the string.
    trim=${1#${1%%[![:space:]]*}}
    printf '%s' "$trim"
}

TrimTrailing() {
    # Remove all trailing white-space.
    # '${trim##*[![:space:]]}': Strip everything but trailing white-space.
    # '${trim%${XXX}}': Remove the white-space from the end of the string.
    trim=${trim%${trim##*[![:space:]]}}
    printf '%s' "$trim"
}

StartStrip() {
    # Usage: lstrip "string" "pattern"
    printf '%s\n' "${1##$2}"
}

EndStrip() {
    # Usage: rstrip "string" "pattern"
    printf '%s\n' "${1%%$2}"
}

IsHeader() {
    line="$1"
    case "$line" in
        "#######"*)
            echo 7;;
        "######"*)
            echo 6;;
        "#####"*)
            echo 5;;
        "####"*)
            echo 4;;
        "###"*)
            echo 3;;
        "##"*)
            echo 2;;
        "#"*)
            echo 1;;
        *)
            echo 0;;
    esac
}

CreateHeading() {
    heading="$1"
    level="$(IsHeader $heading)"

    if [ $level -gt 6 ]; then
        heading="$(echo $heading | sed -e 's/^.*# //')"
        heading="<h6>$heading</h6>"

    else
        hash_counter=""
        for i in 1 2 3 4 5 6; do
            if [ $i -lt $level ] || [ $i -eq $level ]; then
                hash_counter="${hash_counter}#"
            fi
        done
        hash_counter="${hash_counter} "
        heading="$(StartStrip "$heading" "$hash_counter")"
        heading="<h$level>$heading</h$level>"

    fi

    printf '%s' "$heading"
}

CheckBold() {
    word="$1"
    if [ -z "$already_bolded" ]; then
        already_bolded=0
    fi

    # Check start of word
    case $word in
        "**"*)
            word=${word#\*\*}
            if ! [ $already_bolded -eq 1 ]; then
                word="$(printf '<strong>%s' "$word")"
                already_bolded=1
            elif [ $already_bolded -eq 1 ]; then
                word="$(printf '</strong>%s' "$word")"
                already_bolded=0
            fi
            ;;
    esac

    # Check if middle of word contains "**"
    case $word in
        *"**"*)
            if [ ! $already_bolded -eq 1 ]; then
                word="$(echo $word | sed 's/\*\*/<strong>/')"
                already_bolded=1
                case $word in
                    *"**"*)
                        word="$(echo $word | sed 's/\*\*/<\/strong>/')"
                        already_bolded=0
                        ;;
                esac
            else
                word="$(echo $word | sed 's/\*\*/<\/strong>/')"
                already_bolded=0
            fi
            ;;
    esac

    # Check end of word
    case $word in
        *"**")
            word=${word%\*\*}
            if [ ! $already_bolded -eq 1 ]; then
                word="$(printf '%s<strong>' "$word")"
                already_bolded=1
            else
                word="$(printf '%s</strong>' "$word")"
                already_bolded=0
            fi
            ;;
    esac

    printf '%s ' "$word"
}

CheckItalics() {
    word="$1"
    if [ -z "$already_italics" ]; then
        already_italics=0
    fi

    # Check start of word
    case $word in
        "__"*)
            word=${word#__}
            if ! [ $already_italics -eq 1 ]; then
                word="$(printf '<i>%s' "$word")"
                already_italics=1
            elif [ $already_italics -eq 1 ]; then
                word="$(printf '</i>%s' "$word")"
                already_italics=0
            fi
            ;;
    esac

    # Check if middle of word contains "**"
    case $word in
        *"__"*)
            if [ ! $already_italics -eq 1 ]; then
                word="$(echo $word | sed 's/__/<i>/')"
                already_italics=1
                case $word in
                    *"__"*)
                        word="$(echo $word | sed 's/__/<\/i>/')"
                        already_italics=0
                        ;;
                esac
            else
                word="$(echo $word | sed 's/__/<\/i>/')"
                already_italics=0
            fi
            ;;
    esac

    # Check end of word
    case $word in
        *"__")
            word=${word%__}
            if [ ! $already_italics -eq 1 ]; then
                word="$(printf '%s<i>' "$word")"
                already_italics=1
            else
                word="$(printf '%s</i>' "$word")"
                already_italics=0
            fi
            ;;
    esac

    printf '%s ' "$word"
}

EndsWithDoubleSpace() {
    line="$1"
    case "$line" in
        *"  ")
            echo 1;;

        *)
            echo 0;;
    esac
}

ConcatBoldTokens() {
    line="$1"
    for token in $line; do
        CheckBold "$token"
    done
}

ConcatItalicsTokens() {
    line="$1"
    for token in $line; do
        CheckItalics "$token"
    done
}

CheckBullets() {
    line="$1"

    case "$line" in
        "- "*|"* "*)
            line="${line#- }" # Trim away "- "
            printf '<ul><li>%s</li></ul>' "$line"
    esac
}

ParseLine() {
    line="$1"
    end_with_br="$(EndsWithDoubleSpace "$line")"
    if [ -z "$paragraph_started" ]; then
        paragraph_started=0
    fi

    if [ $paragraph_started -ne 1 ]; then
        printf '<p>'
        paragraph_started=1
    fi

    tokens="$(ConcatBoldTokens "$line")"

    bolded_tokens="$tokens"
    tokens=""

    tokens="$(ConcatItalicsTokens "$bolded_tokens")"

    printf '%s' "$tokens"

    if [ "$end_with_br" -eq 1 ]; then
        printf '</p>'
        paragraph_started=0
    fi
}

ParseFile() {
    file="$1"
    while IFS= read -r line || [ -n "$line" ]; do

        case $line in
            "- "*)
            line="$(CheckBullets "$line")";;
        esac

        line="$(TrimLeading "$line")"

        # Headings
        if [ $(IsHeader $line) -gt 0 ]; then
            line="$(CreateHeading "$line")"
            printf '%s\n' "$line"

        # Breaklines
        elif [ "$line" = "\\" ]; then
            line="<br>"
            printf '%s\n' "$line"

        # Paragraphs
        elif [ "$line" = "" ]; then
            printf '%s\n' "$line"

        else
            # printf '<p>%s</p>\n' "$line"
            ParseLine "$line"
        fi

    done < "$file"
}

Main() {
if [ "$#" -eq 0 ]; then
    Help
fi

while [ "$#" -gt 0 ]; do

    case "$1" in
        "-h"|"--help")
            Help
            exit 0;;

    esac

    if [ -f "$1" ]; then
        case "$1" in
            *.md)
                ParseFile "$1";;

            *.markdown)
                ParseFile "$1";;

        esac
    else
        printf 'File: %s does not exist.\n' "$1"
    fi

    shift
done
}

Main "$@"


